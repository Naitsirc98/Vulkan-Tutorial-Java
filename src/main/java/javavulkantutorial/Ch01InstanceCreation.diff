diff --git "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch00BaseCode.java" "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch01InstanceCreation.java"
index 01343a9..b20e928 100644
--- "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch00BaseCode.java"
+++ "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch01InstanceCreation.java"
@@ -1,9 +1,19 @@
 package javavulkantutorial;
 
+import org.lwjgl.PointerBuffer;
+import org.lwjgl.system.MemoryStack;
+import org.lwjgl.vulkan.VkApplicationInfo;
+import org.lwjgl.vulkan.VkInstance;
+import org.lwjgl.vulkan.VkInstanceCreateInfo;
+
 import static org.lwjgl.glfw.GLFW.*;
+import static org.lwjgl.glfw.GLFW.glfwTerminate;
+import static org.lwjgl.glfw.GLFWVulkan.glfwGetRequiredInstanceExtensions;
+import static org.lwjgl.system.MemoryStack.stackPush;
 import static org.lwjgl.system.MemoryUtil.NULL;
+import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch00BaseCode {
+public class Ch01InstanceCreation {
 
     private static class HelloTriangleApplication {
 
@@ -13,6 +23,7 @@ public class Ch00BaseCode {
         // ======= FIELDS ======= //
 
         private long window;
+        private VkInstance instance;
 
         // ======= METHODS ======= //
 
@@ -29,7 +40,6 @@ public class Ch00BaseCode {
                 throw new RuntimeException("Cannot initialize GLFW");
             }
 
-
             glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
             glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
 
@@ -43,7 +53,7 @@ public class Ch00BaseCode {
         }
 
         private void initVulkan() {
-
+            createInstance();
         }
 
         private void mainLoop() {
@@ -56,11 +66,48 @@ public class Ch00BaseCode {
 
         private void cleanup() {
 
+            vkDestroyInstance(instance, null);
+
             glfwDestroyWindow(window);
 
             glfwTerminate();
         }
 
+        private void createInstance() {
+
+            try(MemoryStack stack = stackPush()) {
+
+                // Use calloc to initialize the structs with 0s. Otherwise, the program can crash due to random values
+
+                VkApplicationInfo appInfo = VkApplicationInfo.calloc(stack);
+
+                appInfo.sType(VK_STRUCTURE_TYPE_APPLICATION_INFO);
+                appInfo.pApplicationName(stack.UTF8Safe("Hello Triangle"));
+                appInfo.applicationVersion(VK_MAKE_VERSION(1, 0, 0));
+                appInfo.pEngineName(stack.UTF8Safe("No Engine"));
+                appInfo.engineVersion(VK_MAKE_VERSION(1, 0, 0));
+                appInfo.apiVersion(VK_API_VERSION_1_0);
+
+                VkInstanceCreateInfo createInfo = VkInstanceCreateInfo.calloc(stack);
+
+                createInfo.sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO);
+                createInfo.pApplicationInfo(appInfo);
+                // enabledExtensionCount is implicitly set when you call ppEnabledExtensionNames
+                createInfo.ppEnabledExtensionNames(glfwGetRequiredInstanceExtensions());
+                // same with enabledLayerCount
+                createInfo.ppEnabledLayerNames(null);
+
+                // We need to retrieve the pointer of the created instance
+                PointerBuffer instancePtr = stack.mallocPointer(1);
+
+                if(vkCreateInstance(createInfo, null, instancePtr) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to create instance");
+                }
+
+                instance = new VkInstance(instancePtr.get(0), createInfo);
+            }
+        }
+
     }
 
     public static void main(String[] args) {
