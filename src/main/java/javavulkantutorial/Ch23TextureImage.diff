diff --git "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch22DescriptorSets.java" "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch23TextureImage.java"
index 6173ec8..17a02f4 100644
--- "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch22DescriptorSets.java"
+++ "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch23TextureImage.java"
@@ -15,6 +15,7 @@ import java.util.*;
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
+import static java.lang.ClassLoader.getSystemClassLoader;
 import static java.util.stream.Collectors.toSet;
 import static javavulkantutorial.AlignmentUtils.alignas;
 import static javavulkantutorial.AlignmentUtils.alignof;
@@ -24,17 +25,17 @@ import static javavulkantutorial.ShaderSPIRVUtils.compileShaderFile;
 import static org.lwjgl.glfw.GLFW.*;
 import static org.lwjgl.glfw.GLFWVulkan.glfwCreateWindowSurface;
 import static org.lwjgl.glfw.GLFWVulkan.glfwGetRequiredInstanceExtensions;
+import static org.lwjgl.stb.STBImage.*;
 import static org.lwjgl.system.Configuration.DEBUG;
 import static org.lwjgl.system.MemoryStack.stackGet;
 import static org.lwjgl.system.MemoryStack.stackPush;
 import static org.lwjgl.system.MemoryUtil.NULL;
-import static org.lwjgl.system.MemoryUtil.memSet;
 import static org.lwjgl.vulkan.EXTDebugUtils.*;
 import static org.lwjgl.vulkan.KHRSurface.*;
 import static org.lwjgl.vulkan.KHRSwapchain.*;
 import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch22DescriptorSets {
+public class Ch23TextureImage {
 
     private static class HelloTriangleApplication {
 
@@ -224,6 +225,9 @@ public class Ch22DescriptorSets {
 
         private long commandPool;
 
+        private long textureImage;
+        private long textureImageMemory;
+
         private long vertexBuffer;
         private long vertexBufferMemory;
         private long indexBuffer;
@@ -287,6 +291,7 @@ public class Ch22DescriptorSets {
             pickPhysicalDevice();
             createLogicalDevice();
             createCommandPool();
+            createTextureImage();
             createVertexBuffer();
             createIndexBuffer();
             createDescriptorSetLayout();
@@ -331,6 +336,9 @@ public class Ch22DescriptorSets {
 
             cleanupSwapChain();
 
+            vkDestroyImage(device, textureImage, null);
+            vkFreeMemory(device, textureImageMemory, null);
+
             vkDestroyDescriptorSetLayout(device, descriptorSetLayout, null);
 
             vkDestroyBuffer(device, indexBuffer, null);
@@ -939,6 +947,193 @@ public class Ch22DescriptorSets {
             }
         }
 
+        private void createTextureImage() {
+
+            try(MemoryStack stack = stackPush()) {
+
+                String filename = getSystemClassLoader().getResource("textures/texture.jpg").toExternalForm();
+
+                IntBuffer pWidth = stack.mallocInt(1);
+                IntBuffer pHeight = stack.mallocInt(1);
+                IntBuffer pChannels = stack.mallocInt(1);
+
+                ByteBuffer pixels = stbi_load(filename, pWidth, pHeight, pChannels, STBI_rgb_alpha);
+
+                long imageSize = pWidth.get(0) * pHeight.get(0) * /*always 4 due to STBI_rgb_alpha*/pChannels.get(0);
+
+                if(pixels == null) {
+                    throw new RuntimeException("Failed to load texture image " + filename);
+                }
+
+                LongBuffer pStagingBuffer = stack.mallocLong(1);
+                LongBuffer pStagingBufferMemory = stack.mallocLong(1);
+                createBuffer(imageSize,
+                        VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
+                        VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
+                        pStagingBuffer,
+                        pStagingBufferMemory);
+
+
+                PointerBuffer data = stack.mallocPointer(1);
+                vkMapMemory(device, pStagingBufferMemory.get(0), 0, imageSize, 0, data);
+                {
+                    memcpy(data.getByteBuffer(0, (int) imageSize), pixels, imageSize);
+                }
+                vkUnmapMemory(device, pStagingBufferMemory.get(0));
+
+                stbi_image_free(pixels);
+
+                LongBuffer pTextureImage = stack.mallocLong(1);
+                LongBuffer pTextureImageMemory = stack.mallocLong(1);
+                createImage(pWidth.get(0), pHeight.get(0),
+                        VK_FORMAT_R8G8B8A8_SRGB, VK_IMAGE_TILING_OPTIMAL,
+                        VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT,
+                        VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
+                        pTextureImage,
+                        pTextureImageMemory);
+
+                textureImage = pTextureImage.get(0);
+                textureImageMemory = pTextureImageMemory.get(0);
+
+                transitionImageLayout(textureImage,
+                        VK_FORMAT_R8G8B8A8_SRGB,
+                        VK_IMAGE_LAYOUT_UNDEFINED,
+                        VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
+
+                copyBufferToImage(pStagingBuffer.get(0), textureImage, pWidth.get(0), pHeight.get(0));
+
+                transitionImageLayout(textureImage,
+                        VK_FORMAT_R8G8B8A8_SRGB,
+                        VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
+                        VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);
+
+                vkDestroyBuffer(device, pStagingBuffer.get(0), null);
+                vkFreeMemory(device, pStagingBufferMemory.get(0), null);
+            }
+        }
+
+        private void createImage(int width, int height, int format, int tiling, int usage, int memProperties,
+                                 LongBuffer pTextureImage, LongBuffer pTextureImageMemory) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkImageCreateInfo imageInfo = VkImageCreateInfo.calloc(stack);
+                imageInfo.sType(VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO);
+                imageInfo.imageType(VK_IMAGE_TYPE_2D);
+                imageInfo.extent().width(width);
+                imageInfo.extent().height(height);
+                imageInfo.extent().depth(1);
+                imageInfo.mipLevels(1);
+                imageInfo.arrayLayers(1);
+                imageInfo.format(format);
+                imageInfo.tiling(tiling);
+                imageInfo.initialLayout(VK_IMAGE_LAYOUT_UNDEFINED);
+                imageInfo.usage(usage);
+                imageInfo.samples(VK_SAMPLE_COUNT_1_BIT);
+                imageInfo.sharingMode(VK_SHARING_MODE_EXCLUSIVE);
+
+                if(vkCreateImage(device, imageInfo, null, pTextureImage) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to create image");
+                }
+
+                VkMemoryRequirements memRequirements = VkMemoryRequirements.malloc(stack);
+                vkGetImageMemoryRequirements(device, pTextureImage.get(0), memRequirements);
+
+                VkMemoryAllocateInfo allocInfo = VkMemoryAllocateInfo.calloc(stack);
+                allocInfo.sType(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
+                allocInfo.allocationSize(memRequirements.size());
+                allocInfo.memoryTypeIndex(findMemoryType(stack, memRequirements.memoryTypeBits(), memProperties));
+
+                if(vkAllocateMemory(device, allocInfo, null, pTextureImageMemory) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to allocate image memory");
+                }
+
+                vkBindImageMemory(device, pTextureImage.get(0), pTextureImageMemory.get(0), 0);
+            }
+        }
+
+        private void transitionImageLayout(long image, int format, int oldLayout, int newLayout) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkImageMemoryBarrier.Buffer barrier = VkImageMemoryBarrier.calloc(1, stack);
+                barrier.sType(VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER);
+                barrier.oldLayout(oldLayout);
+                barrier.newLayout(newLayout);
+                barrier.srcQueueFamilyIndex(VK_QUEUE_FAMILY_IGNORED);
+                barrier.dstQueueFamilyIndex(VK_QUEUE_FAMILY_IGNORED);
+                barrier.image(image);
+                barrier.subresourceRange().aspectMask(VK_IMAGE_ASPECT_COLOR_BIT);
+                barrier.subresourceRange().baseMipLevel(0);
+                barrier.subresourceRange().levelCount(1);
+                barrier.subresourceRange().baseArrayLayer(0);
+                barrier.subresourceRange().layerCount(1);
+
+                int sourceStage;
+                int destinationStage;
+
+                if(oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL) {
+
+                    barrier.srcAccessMask(0);
+                    barrier.dstAccessMask(VK_ACCESS_TRANSFER_WRITE_BIT);
+
+                    sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
+                    destinationStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
+
+                } else if(oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL) {
+
+                    barrier.srcAccessMask(VK_ACCESS_TRANSFER_WRITE_BIT);
+                    barrier.dstAccessMask(VK_ACCESS_SHADER_READ_BIT);
+
+                    sourceStage = VK_PIPELINE_STAGE_TRANSFER_BIT;
+                    destinationStage = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
+
+                } else {
+                    throw new IllegalArgumentException("Unsupported layout transition");
+                }
+
+                VkCommandBuffer commandBuffer = beginSingleTimeCommands();
+
+                vkCmdPipelineBarrier(commandBuffer,
+                        sourceStage, destinationStage,
+                        0,
+                        null,
+                        null,
+                        barrier);
+
+                endSingleTimeCommands(commandBuffer);
+            }
+        }
+
+        private void copyBufferToImage(long buffer, long image, int width, int height) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkCommandBuffer commandBuffer = beginSingleTimeCommands();
+
+                VkBufferImageCopy.Buffer region = VkBufferImageCopy.calloc(1, stack);
+                region.bufferOffset(0);
+                region.bufferRowLength(0);   // Tightly packed
+                region.bufferImageHeight(0);  // Tightly packed
+                region.imageSubresource().aspectMask(VK_IMAGE_ASPECT_COLOR_BIT);
+                region.imageSubresource().mipLevel(0);
+                region.imageSubresource().baseArrayLayer(0);
+                region.imageSubresource().layerCount(1);
+                region.imageOffset().set(0, 0, 0);
+                region.imageExtent(VkExtent3D.calloc(stack).set(width, height, 1));
+
+                vkCmdCopyBufferToImage(commandBuffer, buffer, image, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, region);
+
+                endSingleTimeCommands(commandBuffer);
+            }
+        }
+
+        private void memcpy(ByteBuffer dst, ByteBuffer src, long size) {
+            src.limit((int)size);
+            dst.put(src);
+            src.limit(src.capacity()).rewind();
+        }
+
         private void createVertexBuffer() {
 
             try(MemoryStack stack = stackPush()) {
@@ -1135,7 +1330,7 @@ public class Ch22DescriptorSets {
                 VkMemoryRequirements memRequirements = VkMemoryRequirements.malloc(stack);
                 vkGetBufferMemoryRequirements(device, pBuffer.get(0), memRequirements);
 
-                VkMemoryAllocateInfo allocInfo = VkMemoryAllocateInfo.calloc(stack);
+                VkMemoryAllocateInfo allocInfo = VkMemoryAllocateInfo.callocStack(stack);
                 allocInfo.sType(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
                 allocInfo.allocationSize(memRequirements.size());
                 allocInfo.memoryTypeIndex(findMemoryType(stack, memRequirements.memoryTypeBits(), properties));
@@ -1148,11 +1343,11 @@ public class Ch22DescriptorSets {
             }
         }
 
-        private void copyBuffer(long srcBuffer, long dstBuffer, long size) {
+        private VkCommandBuffer beginSingleTimeCommands() {
 
             try(MemoryStack stack = stackPush()) {
 
-                VkCommandBufferAllocateInfo allocInfo = VkCommandBufferAllocateInfo.calloc(stack);
+                VkCommandBufferAllocateInfo allocInfo = VkCommandBufferAllocateInfo.callocStack(stack);
                 allocInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
                 allocInfo.level(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
                 allocInfo.commandPool(commandPool);
@@ -1162,29 +1357,45 @@ public class Ch22DescriptorSets {
                 vkAllocateCommandBuffers(device, allocInfo, pCommandBuffer);
                 VkCommandBuffer commandBuffer = new VkCommandBuffer(pCommandBuffer.get(0), device);
 
-                VkCommandBufferBeginInfo beginInfo = VkCommandBufferBeginInfo.calloc(stack);
+                VkCommandBufferBeginInfo beginInfo = VkCommandBufferBeginInfo.callocStack(stack);
                 beginInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
                 beginInfo.flags(VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);
 
                 vkBeginCommandBuffer(commandBuffer, beginInfo);
-                {
-                    VkBufferCopy.Buffer copyRegion = VkBufferCopy.calloc(1, stack);
-                    copyRegion.size(size);
-                    vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, copyRegion);
-                }
+
+                return commandBuffer;
+            }
+        }
+
+        private void endSingleTimeCommands(VkCommandBuffer commandBuffer) {
+
+            try(MemoryStack stack = stackPush()) {
+
                 vkEndCommandBuffer(commandBuffer);
 
-                VkSubmitInfo submitInfo = VkSubmitInfo.callocStack(stack);
+                VkSubmitInfo.Buffer submitInfo = VkSubmitInfo.callocStack(1, stack);
                 submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
-                submitInfo.pCommandBuffers(pCommandBuffer);
-
-                if(vkQueueSubmit(graphicsQueue, submitInfo, VK_NULL_HANDLE) != VK_SUCCESS) {
-                    throw new RuntimeException("Failed to submit copy command buffer");
-                }
+                submitInfo.pCommandBuffers(stack.pointers(commandBuffer));
 
+                vkQueueSubmit(graphicsQueue, submitInfo, VK_NULL_HANDLE);
                 vkQueueWaitIdle(graphicsQueue);
 
-                vkFreeCommandBuffers(device, commandPool, pCommandBuffer);
+                vkFreeCommandBuffers(device, commandPool, commandBuffer);
+            }
+        }
+
+        private void copyBuffer(long srcBuffer, long dstBuffer, long size) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkCommandBuffer commandBuffer = beginSingleTimeCommands();
+
+                VkBufferCopy.Buffer copyRegion = VkBufferCopy.callocStack(1, stack);
+                copyRegion.size(size);
+
+                vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, copyRegion);
+
+                endSingleTimeCommands(commandBuffer);
             }
         }
 
