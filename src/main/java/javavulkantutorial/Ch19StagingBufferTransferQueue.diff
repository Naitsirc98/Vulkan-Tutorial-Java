diff --git "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBuffer.java" "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBufferTransferQueue.java"
index bf04628..589b3bc 100644
--- "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBuffer.java"
+++ "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBufferTransferQueue.java"
@@ -25,14 +25,28 @@ import static org.lwjgl.glfw.GLFW.*;
 import static org.lwjgl.glfw.GLFWVulkan.glfwCreateWindowSurface;
 import static org.lwjgl.glfw.GLFWVulkan.glfwGetRequiredInstanceExtensions;
 import static org.lwjgl.system.Configuration.DEBUG;
-import static org.lwjgl.system.MemoryStack.*;
+import static org.lwjgl.system.MemoryStack.stackGet;
+import static org.lwjgl.system.MemoryStack.stackPush;
 import static org.lwjgl.system.MemoryUtil.NULL;
 import static org.lwjgl.vulkan.EXTDebugUtils.*;
 import static org.lwjgl.vulkan.KHRSurface.*;
 import static org.lwjgl.vulkan.KHRSwapchain.*;
 import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch19StagingBuffer {
+/**
+ * This is an alternative version of the Staging Buffer Chapter, where I use a different queue family for transfer operations.
+ *
+ * As suggested in the tutorial, I will make the following modifications:
+ *
+ * - Modify QueueFamilyIndices and findQueueFamilies to explicitly look for a queue family with the VK_QUEUE_TRANSFER bit, but not the VK_QUEUE_GRAPHICS_BIT.
+ * - Modify createLogicalDevice to request a handle to the transfer queue
+ * - Create a second command pool for command buffers that are submitted on the transfer queue family
+ * - Change the sharingMode of resources to be VK_SHARING_MODE_CONCURRENT and specify both the graphics and transfer queue families
+ * - Submit any transfer commands like vkCmdCopyBuffer to the transfer queue instead of the graphics queue
+ *
+ *
+ * */
+public class Ch19StagingBufferTransferQueue {
 
     private static class HelloTriangleApplication {
 
@@ -58,7 +72,7 @@ public class Ch19StagingBuffer {
         }
 
         private static final Set<String> DEVICE_EXTENSIONS = Stream.of(VK_KHR_SWAPCHAIN_EXTENSION_NAME)
-                .collect(toSet());
+            .collect(toSet());
 
 
 
@@ -72,7 +86,7 @@ public class Ch19StagingBuffer {
         }
 
         private static int createDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT createInfo,
-                                                        VkAllocationCallbacks allocationCallbacks, LongBuffer pDebugMessenger) {
+                VkAllocationCallbacks allocationCallbacks, LongBuffer pDebugMessenger) {
 
             if(vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT") != NULL) {
                 return vkCreateDebugUtilsMessengerEXT(instance, createInfo, allocationCallbacks, pDebugMessenger);
@@ -94,17 +108,18 @@ public class Ch19StagingBuffer {
             // We use Integer to use null as the empty value
             private Integer graphicsFamily;
             private Integer presentFamily;
+            private Integer transferFamily;
 
             private boolean isComplete() {
-                return graphicsFamily != null && presentFamily != null;
+                return graphicsFamily != null && presentFamily != null && transferFamily != null;
             }
 
             public int[] unique() {
-                return IntStream.of(graphicsFamily, presentFamily).distinct().toArray();
+                return IntStream.of(graphicsFamily, presentFamily, transferFamily).distinct().toArray();
             }
 
             public int[] array() {
-                return new int[] {graphicsFamily, presentFamily};
+                return new int[] {graphicsFamily, presentFamily, transferFamily};
             }
         }
 
@@ -133,7 +148,7 @@ public class Ch19StagingBuffer {
             private static VkVertexInputBindingDescription.Buffer getBindingDescription(MemoryStack stack) {
 
                 VkVertexInputBindingDescription.Buffer bindingDescription =
-                        VkVertexInputBindingDescription.calloc(1, stack);
+                    VkVertexInputBindingDescription.calloc(1, stack);
 
                 bindingDescription.binding(0);
                 bindingDescription.stride(Vertex.SIZEOF);
@@ -145,7 +160,7 @@ public class Ch19StagingBuffer {
             private static VkVertexInputAttributeDescription.Buffer getAttributeDescriptions(MemoryStack stack) {
 
                 VkVertexInputAttributeDescription.Buffer attributeDescriptions =
-                        VkVertexInputAttributeDescription.calloc(2);
+                    VkVertexInputAttributeDescription.calloc(2);
 
                 // Position
                 VkVertexInputAttributeDescription posDescription = attributeDescriptions.get(0);
@@ -167,9 +182,9 @@ public class Ch19StagingBuffer {
         }
 
         private static final Vertex[] VERTICES = {
-                new Vertex(new Vector2f(0.0f, -0.5f), new Vector3f(1.0f, 0.0f, 0.0f)),
-                new Vertex(new Vector2f(0.5f, 0.5f), new Vector3f(0.0f, 1.0f, 0.0f)),
-                new Vertex(new Vector2f(-0.5f, 0.5f), new Vector3f(0.0f, 0.0f, 1.0f))
+            new Vertex(new Vector2f(0.0f, -0.5f), new Vector3f(1.0f, 0.0f, 0.0f)),
+            new Vertex(new Vector2f(0.5f, 0.5f), new Vector3f(0.0f, 1.0f, 0.0f)),
+            new Vertex(new Vector2f(-0.5f, 0.5f), new Vector3f(0.0f, 0.0f, 1.0f))
         };
 
         // ======= FIELDS ======= //
@@ -185,6 +200,7 @@ public class Ch19StagingBuffer {
 
         private VkQueue graphicsQueue;
         private VkQueue presentQueue;
+        private VkQueue transferQueue;
 
         private long swapChain;
         private List<Long> swapChainImages;
@@ -198,11 +214,13 @@ public class Ch19StagingBuffer {
         private long graphicsPipeline;
 
         private long commandPool;
+        private long transferCommandPool;
 
         private long vertexBuffer;
         private long vertexBufferMemory;
 
         private List<VkCommandBuffer> commandBuffers;
+        private VkCommandBuffer transferCommandBuffer;
 
         private List<Frame> inFlightFrames;
         private Map<Integer, Frame> imagesInFlight;
@@ -295,6 +313,9 @@ public class Ch19StagingBuffer {
 
             cleanupSwapChain();
 
+            vkFreeCommandBuffers(device, transferCommandPool, stackGet().pointers(transferCommandBuffer));
+            vkDestroyCommandPool(device, transferCommandPool, null);
+
             vkDestroyBuffer(device, vertexBuffer, null);
             vkFreeMemory(device, vertexBufferMemory, null);
 
@@ -519,6 +540,9 @@ public class Ch19StagingBuffer {
 
                 vkGetDeviceQueue(device, indices.presentFamily, 0, pQueue);
                 presentQueue = new VkQueue(pQueue.get(0), device);
+
+                vkGetDeviceQueue(device, indices.transferFamily, 0, pQueue);
+                transferQueue = new VkQueue(pQueue.get(0), device);
             }
         }
 
@@ -865,8 +889,36 @@ public class Ch19StagingBuffer {
                 if (vkCreateCommandPool(device, poolInfo, null, pCommandPool) != VK_SUCCESS) {
                     throw new RuntimeException("Failed to create command pool");
                 }
-
                 commandPool = pCommandPool.get(0);
+
+                // ===> Create the transfer command pool <===
+
+                poolInfo.queueFamilyIndex(queueFamilyIndices.transferFamily);
+                // Tell Vulkan that the buffers of this pool will be constantly rerecorded
+                poolInfo.flags(VK_COMMAND_POOL_CREATE_TRANSIENT_BIT);
+
+                if (vkCreateCommandPool(device, poolInfo, null, pCommandPool) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to create command pool");
+                }
+                transferCommandPool = pCommandPool.get(0);
+
+                allocateTransferCommandBuffer();
+            }
+        }
+
+        private void allocateTransferCommandBuffer() {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkCommandBufferAllocateInfo allocInfo = VkCommandBufferAllocateInfo.calloc(stack);
+                allocInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
+                allocInfo.level(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
+                allocInfo.commandPool(transferCommandPool);
+                allocInfo.commandBufferCount(1);
+
+                PointerBuffer pCommandBuffer = stack.mallocPointer(1);
+                vkAllocateCommandBuffers(device, allocInfo, pCommandBuffer);
+                transferCommandBuffer = new VkCommandBuffer(pCommandBuffer.get(0), device);
             }
         }
 
@@ -919,7 +971,10 @@ public class Ch19StagingBuffer {
                 bufferInfo.sType(VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO);
                 bufferInfo.size(size);
                 bufferInfo.usage(usage);
-                bufferInfo.sharingMode(VK_SHARING_MODE_EXCLUSIVE);
+                // Change the sharing mode to concurrent (it will be shared between graphics and transfer queues)
+                QueueFamilyIndices queueFamilies = findQueueFamilies(physicalDevice);
+                bufferInfo.pQueueFamilyIndices(stack.ints(queueFamilies.graphicsFamily, queueFamilies.transferFamily));
+                bufferInfo.sharingMode(VK_SHARING_MODE_CONCURRENT);
 
                 if(vkCreateBuffer(device, bufferInfo, null, pBuffer) != VK_SUCCESS) {
                     throw new RuntimeException("Failed to create vertex buffer");
@@ -945,39 +1000,28 @@ public class Ch19StagingBuffer {
 
             try(MemoryStack stack = stackPush()) {
 
-                VkCommandBufferAllocateInfo allocInfo = VkCommandBufferAllocateInfo.calloc(stack);
-                allocInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
-                allocInfo.level(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
-                allocInfo.commandPool(commandPool);
-                allocInfo.commandBufferCount(1);
-
-                PointerBuffer pCommandBuffer = stack.mallocPointer(1);
-                vkAllocateCommandBuffers(device, allocInfo, pCommandBuffer);
-                VkCommandBuffer commandBuffer = new VkCommandBuffer(pCommandBuffer.get(0), device);
-
                 VkCommandBufferBeginInfo beginInfo = VkCommandBufferBeginInfo.calloc(stack);
                 beginInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
                 beginInfo.flags(VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);
 
-                vkBeginCommandBuffer(commandBuffer, beginInfo);
+                // Transfer command buffer implicitly reset
+                vkBeginCommandBuffer(transferCommandBuffer, beginInfo);
                 {
                     VkBufferCopy.Buffer copyRegion = VkBufferCopy.calloc(1, stack);
                     copyRegion.size(size);
-                    vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, copyRegion);
+                    vkCmdCopyBuffer(transferCommandBuffer, srcBuffer, dstBuffer, copyRegion);
                 }
-                vkEndCommandBuffer(commandBuffer);
+                vkEndCommandBuffer(transferCommandBuffer);
 
                 VkSubmitInfo submitInfo = VkSubmitInfo.calloc(stack);
                 submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
-                submitInfo.pCommandBuffers(pCommandBuffer);
+                submitInfo.pCommandBuffers(stack.pointers(transferCommandBuffer));
 
-                if(vkQueueSubmit(graphicsQueue, submitInfo, VK_NULL_HANDLE) != VK_SUCCESS) {
+                if(vkQueueSubmit(transferQueue, submitInfo, VK_NULL_HANDLE) != VK_SUCCESS) {
                     throw new RuntimeException("Failed to submit copy command buffer");
                 }
 
-                vkQueueWaitIdle(graphicsQueue);
-
-                vkFreeCommandBuffers(device, commandPool, pCommandBuffer);
+                vkQueueWaitIdle(transferQueue);
             }
         }
 
@@ -1101,11 +1145,11 @@ public class Ch19StagingBuffer {
                 for(int i = 0;i < MAX_FRAMES_IN_FLIGHT;i++) {
 
                     if(vkCreateSemaphore(device, semaphoreInfo, null, pImageAvailableSemaphore) != VK_SUCCESS
-                    || vkCreateSemaphore(device, semaphoreInfo, null, pRenderFinishedSemaphore) != VK_SUCCESS
-                    || vkCreateFence(device, fenceInfo, null, pFence) != VK_SUCCESS) {
+                            || vkCreateSemaphore(device, semaphoreInfo, null, pRenderFinishedSemaphore) != VK_SUCCESS
+                            || vkCreateFence(device, fenceInfo, null, pFence) != VK_SUCCESS) {
 
                         throw new RuntimeException("Failed to create synchronization objects for the frame " + i);
-                    }
+                            }
 
                     inFlightFrames.add(new Frame(pImageAvailableSemaphore.get(0), pRenderFinishedSemaphore.get(0), pFence.get(0)));
                 }
@@ -1141,7 +1185,7 @@ public class Ch19StagingBuffer {
 
                 imagesInFlight.put(imageIndex, thisFrame);
 
-                VkSubmitInfo submitInfo = VkSubmitInfo.calloc(stack);
+                VkSubmitInfo submitInfo = VkSubmitInfo.callocStack(stack);
                 submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
 
                 submitInfo.waitSemaphoreCount(1);
@@ -1159,7 +1203,7 @@ public class Ch19StagingBuffer {
                     throw new RuntimeException("Failed to submit draw command buffer: " + vkResult);
                 }
 
-                VkPresentInfoKHR presentInfo = VkPresentInfoKHR.calloc(stack);
+                VkPresentInfoKHR presentInfo = VkPresentInfoKHR.callocStack(stack);
                 presentInfo.sType(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR);
 
                 presentInfo.pWaitSemaphores(thisFrame.pRenderFinishedSemaphore());
@@ -1186,7 +1230,7 @@ public class Ch19StagingBuffer {
 
             try(MemoryStack stack = stackPush()) {
 
-                VkShaderModuleCreateInfo createInfo = VkShaderModuleCreateInfo.calloc(stack);
+                VkShaderModuleCreateInfo createInfo = VkShaderModuleCreateInfo.callocStack(stack);
 
                 createInfo.sType(VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
                 createInfo.pCode(spirvCode);
@@ -1203,10 +1247,10 @@ public class Ch19StagingBuffer {
 
         private VkSurfaceFormatKHR chooseSwapSurfaceFormat(VkSurfaceFormatKHR.Buffer availableFormats) {
             return availableFormats.stream()
-                    .filter(availableFormat -> availableFormat.format() == VK_FORMAT_B8G8R8_UNORM)
-                    .filter(availableFormat -> availableFormat.colorSpace() == VK_COLOR_SPACE_SRGB_NONLINEAR_KHR)
-                    .findAny()
-                    .orElse(availableFormats.get(0));
+                .filter(availableFormat -> availableFormat.format() == VK_FORMAT_B8G8R8_UNORM)
+                .filter(availableFormat -> availableFormat.colorSpace() == VK_COLOR_SPACE_SRGB_NONLINEAR_KHR)
+                .findAny()
+                .orElse(availableFormats.get(0));
         }
 
         private int chooseSwapPresentMode(IntBuffer availablePresentModes) {
@@ -1329,6 +1373,14 @@ public class Ch19StagingBuffer {
                     if((queueFamilies.get(i).queueFlags() & VK_QUEUE_GRAPHICS_BIT) != 0) {
                         indices.graphicsFamily = i;
                     }
+                    else if((queueFamilies.get(i).queueFlags() & VK_QUEUE_TRANSFER_BIT) != 0) {
+                        indices.transferFamily = i;
+                    }
+                    // In case of having only 1 queueFamily, use the same index since VK_QUEUE_GRAPHICS_BIT also implicitly
+                    // covers VK_QUEUE_TRANSFER_BIT
+                    if(queueFamilies.capacity() == 1){
+                        indices.transferFamily = i;
+                    }
 
                     vkGetPhysicalDeviceSurfaceSupportKHR(device, i, surface, presentSupport);
 
@@ -1346,8 +1398,8 @@ public class Ch19StagingBuffer {
             PointerBuffer buffer = stack.mallocPointer(collection.size());
 
             collection.stream()
-                    .map(stack::UTF8)
-                    .forEach(buffer::put);
+                .map(stack::UTF8)
+                .forEach(buffer::put);
 
             return buffer.rewind();
         }
@@ -1392,8 +1444,8 @@ public class Ch19StagingBuffer {
                 vkEnumerateInstanceLayerProperties(layerCount, availableLayers);
 
                 Set<String> availableLayerNames = availableLayers.stream()
-                        .map(VkLayerProperties::layerNameString)
-                        .collect(toSet());
+                    .map(VkLayerProperties::layerNameString)
+                    .collect(toSet());
 
                 return availableLayerNames.containsAll(VALIDATION_LAYERS);
             }
