diff --git "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch26DepthBuffering.java" "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch27ModelLoading.java"
index 5e5873b..ca38319 100644
--- "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch26DepthBuffering.java"
+++ "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch27ModelLoading.java"
@@ -3,10 +3,14 @@ package javavulkantutorial;
 import javavulkantutorial.ShaderSPIRVUtils.SPIRV;
 import org.joml.*;
 import org.lwjgl.PointerBuffer;
+import org.lwjgl.assimp.AIScene;
+import org.lwjgl.assimp.Assimp;
+import org.lwjgl.system.Configuration;
 import org.lwjgl.system.MemoryStack;
 import org.lwjgl.system.Pointer;
 import org.lwjgl.vulkan.*;
 
+import java.io.File;
 import java.lang.Math;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -22,9 +26,11 @@ import static java.lang.ClassLoader.getSystemClassLoader;
 import static java.util.stream.Collectors.toSet;
 import static javavulkantutorial.AlignmentUtils.alignas;
 import static javavulkantutorial.AlignmentUtils.alignof;
+import static javavulkantutorial.ModelLoader.*;
 import static javavulkantutorial.ShaderSPIRVUtils.ShaderKind.FRAGMENT_SHADER;
 import static javavulkantutorial.ShaderSPIRVUtils.ShaderKind.VERTEX_SHADER;
 import static javavulkantutorial.ShaderSPIRVUtils.compileShaderFile;
+import static org.lwjgl.assimp.Assimp.*;
 import static org.lwjgl.glfw.GLFW.*;
 import static org.lwjgl.glfw.GLFWVulkan.glfwCreateWindowSurface;
 import static org.lwjgl.glfw.GLFWVulkan.glfwGetRequiredInstanceExtensions;
@@ -38,7 +44,7 @@ import static org.lwjgl.vulkan.KHRSurface.*;
 import static org.lwjgl.vulkan.KHRSwapchain.*;
 import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch26DepthBuffering {
+public class Ch27ModelLoading {
 
     private static class HelloTriangleApplication {
 
@@ -197,23 +203,6 @@ public class Ch26DepthBuffering {
 
         }
 
-        private static final Vertex[] VERTICES = {
-                new Vertex(new Vector3f(-0.5f, -0.5f, 0.0f ), new Vector3f(1.0f, 0.0f, 0.0f), new Vector2f(0.0f, 0.0f)),
-                new Vertex(new Vector3f(0.5f, -0.5f, 0.0f  ), new Vector3f(0.0f, 1.0f, 0.0f), new Vector2f(1.0f, 0.0f)),
-                new Vertex(new Vector3f(0.5f, 0.5f, 0.0f   ), new Vector3f(0.0f, 0.0f, 1.0f), new Vector2f(1.0f, 1.0f)),
-                new Vertex(new Vector3f(-0.5f, 0.5f, 0.0f  ), new Vector3f(1.0f, 1.0f, 1.0f), new Vector2f(0.0f, 1.0f)),
-
-                new Vertex(new Vector3f(-0.5f, -0.5f, -0.5f), new Vector3f(1.0f, 0.0f, 0.0f), new Vector2f(0.0f, 0.0f)),
-                new Vertex(new Vector3f(0.5f, -0.5f, -0.5f ), new Vector3f(0.0f, 1.0f, 0.0f), new Vector2f(1.0f, 0.0f)),
-                new Vertex(new Vector3f(0.5f, 0.5f, -0.5f  ), new Vector3f(0.0f, 0.0f, 1.0f), new Vector2f(1.0f, 1.0f)),
-                new Vertex(new Vector3f(-0.5f, 0.5f, -0.5f ), new Vector3f(1.0f, 1.0f, 1.0f), new Vector2f(0.0f, 1.0f))
-        };
-
-        private static final /*uint16_t*/ short[] INDICES = {
-                0, 1, 2, 2, 3, 0,
-                4, 5, 6, 6, 7, 4
-        };
-
         // ======= FIELDS ======= //
 
         private long window;
@@ -253,6 +242,8 @@ public class Ch26DepthBuffering {
         private long textureImageView;
         private long textureSampler;
 
+        private Vertex[] vertices;
+        private int[] indices;
         private long vertexBuffer;
         private long vertexBufferMemory;
         private long indexBuffer;
@@ -319,6 +310,7 @@ public class Ch26DepthBuffering {
             createTextureImage();
             createTextureImageView();
             createTextureSampler();
+            loadModel();
             createVertexBuffer();
             createIndexBuffer();
             createDescriptorSetLayout();
@@ -1067,7 +1059,7 @@ public class Ch26DepthBuffering {
 
             try(MemoryStack stack = stackPush()) {
 
-                String filename = Paths.get(new URI(getSystemClassLoader().getResource("textures/texture.jpg").toExternalForm())).toString();
+                String filename = Paths.get(new URI(getSystemClassLoader().getResource("textures/chalet.jpg").toExternalForm())).toString();
 
                 IntBuffer pWidth = stack.mallocInt(1);
                 IntBuffer pHeight = stack.mallocInt(1);
@@ -1332,11 +1324,37 @@ public class Ch26DepthBuffering {
             src.limit(src.capacity()).rewind();
         }
 
+        private void loadModel() {
+
+            File modelFile = new File(getSystemClassLoader().getResource("models/chalet.obj").getFile());
+
+            Model model = ModelLoader.loadModel(modelFile, aiProcess_FlipUVs | aiProcess_DropNormals);
+
+            final int vertexCount = model.positions.size();
+
+            vertices = new Vertex[vertexCount];
+
+            final Vector3fc color = new Vector3f(1.0f, 1.0f, 1.0f);
+
+            for(int i = 0;i < vertexCount;i++) {
+                vertices[i] = new Vertex(
+                        model.positions.get(i),
+                        color,
+                        model.texCoords.get(i));
+            }
+
+            indices = new int[model.indices.size()];
+
+            for(int i = 0;i < indices.length;i++) {
+                indices[i] = model.indices.get(i);
+            }
+        }
+
         private void createVertexBuffer() {
 
             try(MemoryStack stack = stackPush()) {
 
-                long bufferSize = Vertex.SIZEOF * VERTICES.length;
+                long bufferSize = Vertex.SIZEOF * vertices.length;
 
                 LongBuffer pBuffer = stack.mallocLong(1);
                 LongBuffer pBufferMemory = stack.mallocLong(1);
@@ -1353,7 +1371,7 @@ public class Ch26DepthBuffering {
 
                 vkMapMemory(device, stagingBufferMemory, 0, bufferSize, 0, data);
                 {
-                    memcpy(data.getByteBuffer(0, (int) bufferSize), VERTICES);
+                    memcpy(data.getByteBuffer(0, (int) bufferSize), vertices);
                 }
                 vkUnmapMemory(device, stagingBufferMemory);
 
@@ -1377,7 +1395,7 @@ public class Ch26DepthBuffering {
 
             try(MemoryStack stack = stackPush()) {
 
-                long bufferSize = Short.BYTES * INDICES.length;
+                long bufferSize = Integer.BYTES * indices.length;
 
                 LongBuffer pBuffer = stack.mallocLong(1);
                 LongBuffer pBufferMemory = stack.mallocLong(1);
@@ -1394,7 +1412,7 @@ public class Ch26DepthBuffering {
 
                 vkMapMemory(device, stagingBufferMemory, 0, bufferSize, 0, data);
                 {
-                    memcpy(data.getByteBuffer(0, (int) bufferSize), INDICES);
+                    memcpy(data.getByteBuffer(0, (int) bufferSize), indices);
                 }
                 vkUnmapMemory(device, stagingBufferMemory);
 
@@ -1443,7 +1461,7 @@ public class Ch26DepthBuffering {
 
             try(MemoryStack stack = stackPush()) {
 
-                VkDescriptorPoolSize.Buffer poolSizes = VkDescriptorPoolSize.callocStack(2, stack);
+                VkDescriptorPoolSize.Buffer poolSizes = VkDescriptorPoolSize.calloc(2, stack);
 
                 VkDescriptorPoolSize uniformBufferPoolSize = poolSizes.get(0);
                 uniformBufferPoolSize.type(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER);
@@ -1453,7 +1471,7 @@ public class Ch26DepthBuffering {
                 textureSamplerPoolSize.type(VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER);
                 textureSamplerPoolSize.descriptorCount(swapChainImages.size());
 
-                VkDescriptorPoolCreateInfo poolInfo = VkDescriptorPoolCreateInfo.callocStack(stack);
+                VkDescriptorPoolCreateInfo poolInfo = VkDescriptorPoolCreateInfo.calloc(stack);
                 poolInfo.sType(VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
                 poolInfo.pPoolSizes(poolSizes);
                 poolInfo.maxSets(swapChainImages.size());
@@ -1634,10 +1652,10 @@ public class Ch26DepthBuffering {
             }
         }
 
-        private void memcpy(ByteBuffer buffer, short[] indices) {
+        private void memcpy(ByteBuffer buffer, int[] indices) {
 
-            for(short index : indices) {
-                buffer.putShort(index);
+            for(int index : indices) {
+                buffer.putInt(index);
             }
 
             buffer.rewind();
@@ -1728,12 +1746,12 @@ public class Ch26DepthBuffering {
                         LongBuffer offsets = stack.longs(0);
                         vkCmdBindVertexBuffers(commandBuffer, 0, vertexBuffers, offsets);
 
-                        vkCmdBindIndexBuffer(commandBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT16);
+                        vkCmdBindIndexBuffer(commandBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT32);
 
                         vkCmdBindDescriptorSets(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS,
                                 pipelineLayout, 0, stack.longs(descriptorSets.get(i)), null);
 
-                        vkCmdDrawIndexed(commandBuffer, INDICES.length, 1, 0, 0, 0);
+                        vkCmdDrawIndexed(commandBuffer, indices.length, 1, 0, 0, 0);
                     }
                     vkCmdEndRenderPass(commandBuffer);
 
