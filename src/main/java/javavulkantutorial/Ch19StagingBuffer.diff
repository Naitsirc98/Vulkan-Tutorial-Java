diff --git "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch18VertexBuffer.java" "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBuffer.java"
index 624eb7b..bf04628 100644
--- "a/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch18VertexBuffer.java"
+++ "b/G:\\Java-Dev\\Vulkan-Tutorial-Java\\src\\main\\java\\javavulkantutorial\\Ch19StagingBuffer.java"
@@ -25,15 +25,14 @@ import static org.lwjgl.glfw.GLFW.*;
 import static org.lwjgl.glfw.GLFWVulkan.glfwCreateWindowSurface;
 import static org.lwjgl.glfw.GLFWVulkan.glfwGetRequiredInstanceExtensions;
 import static org.lwjgl.system.Configuration.DEBUG;
-import static org.lwjgl.system.MemoryStack.stackGet;
-import static org.lwjgl.system.MemoryStack.stackPush;
+import static org.lwjgl.system.MemoryStack.*;
 import static org.lwjgl.system.MemoryUtil.NULL;
 import static org.lwjgl.vulkan.EXTDebugUtils.*;
 import static org.lwjgl.vulkan.KHRSurface.*;
 import static org.lwjgl.vulkan.KHRSwapchain.*;
 import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch18VertexBuffer {
+public class Ch19StagingBuffer {
 
     private static class HelloTriangleApplication {
 
@@ -173,7 +172,6 @@ public class Ch18VertexBuffer {
                 new Vertex(new Vector2f(-0.5f, 0.5f), new Vector3f(0.0f, 0.0f, 1.0f))
         };
 
-
         // ======= FIELDS ======= //
 
         private long window;
@@ -874,46 +872,112 @@ public class Ch18VertexBuffer {
 
         private void createVertexBuffer() {
 
+            try(MemoryStack stack = stackPush()) {
+
+                long bufferSize = Vertex.SIZEOF * VERTICES.length;
+
+                LongBuffer pBuffer = stack.mallocLong(1);
+                LongBuffer pBufferMemory = stack.mallocLong(1);
+                createBuffer(bufferSize,
+                        VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
+                        VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
+                        pBuffer,
+                        pBufferMemory);
+
+                long stagingBuffer = pBuffer.get(0);
+                long stagingBufferMemory = pBufferMemory.get(0);
+
+                PointerBuffer data = stack.mallocPointer(1);
+
+                vkMapMemory(device, stagingBufferMemory, 0, bufferSize, 0, data);
+                {
+                    memcpy(data.getByteBuffer(0, (int) bufferSize), VERTICES);
+                }
+                vkUnmapMemory(device, stagingBufferMemory);
+
+                createBuffer(bufferSize,
+                        VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,
+                        VK_MEMORY_HEAP_DEVICE_LOCAL_BIT,
+                        pBuffer,
+                        pBufferMemory);
+
+                vertexBuffer = pBuffer.get(0);
+                vertexBufferMemory = pBufferMemory.get(0);
+
+                copyBuffer(stagingBuffer, vertexBuffer, bufferSize);
+
+                vkDestroyBuffer(device, stagingBuffer, null);
+                vkFreeMemory(device, stagingBufferMemory, null);
+            }
+        }
+
+        private void createBuffer(long size, int usage, int properties, LongBuffer pBuffer, LongBuffer pBufferMemory) {
+
             try(MemoryStack stack = stackPush()) {
 
                 VkBufferCreateInfo bufferInfo = VkBufferCreateInfo.calloc(stack);
                 bufferInfo.sType(VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO);
-                bufferInfo.size(Vertex.SIZEOF * VERTICES.length);
-                bufferInfo.usage(VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);
+                bufferInfo.size(size);
+                bufferInfo.usage(usage);
                 bufferInfo.sharingMode(VK_SHARING_MODE_EXCLUSIVE);
 
-                LongBuffer pVertexBuffer = stack.mallocLong(1);
-
-                if(vkCreateBuffer(device, bufferInfo, null, pVertexBuffer) != VK_SUCCESS) {
+                if(vkCreateBuffer(device, bufferInfo, null, pBuffer) != VK_SUCCESS) {
                     throw new RuntimeException("Failed to create vertex buffer");
                 }
-                vertexBuffer = pVertexBuffer.get(0);
 
                 VkMemoryRequirements memRequirements = VkMemoryRequirements.malloc(stack);
-                vkGetBufferMemoryRequirements(device, vertexBuffer, memRequirements);
+                vkGetBufferMemoryRequirements(device, pBuffer.get(0), memRequirements);
 
                 VkMemoryAllocateInfo allocInfo = VkMemoryAllocateInfo.calloc(stack);
                 allocInfo.sType(VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
                 allocInfo.allocationSize(memRequirements.size());
-                allocInfo.memoryTypeIndex(findMemoryType(stack, memRequirements.memoryTypeBits(),
-                        VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT));
+                allocInfo.memoryTypeIndex(findMemoryType(stack, memRequirements.memoryTypeBits(), properties));
 
-                LongBuffer pVertexBufferMemory = stack.mallocLong(1);
-
-                if(vkAllocateMemory(device, allocInfo, null, pVertexBufferMemory) != VK_SUCCESS) {
+                if(vkAllocateMemory(device, allocInfo, null, pBufferMemory) != VK_SUCCESS) {
                     throw new RuntimeException("Failed to allocate vertex buffer memory");
                 }
-                vertexBufferMemory = pVertexBufferMemory.get(0);
 
-                vkBindBufferMemory(device, vertexBuffer, vertexBufferMemory, 0);
+                vkBindBufferMemory(device, pBuffer.get(0), pBufferMemory.get(0), 0);
+            }
+        }
 
-                PointerBuffer data = stack.mallocPointer(1);
+        private void copyBuffer(long srcBuffer, long dstBuffer, long size) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkCommandBufferAllocateInfo allocInfo = VkCommandBufferAllocateInfo.calloc(stack);
+                allocInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO);
+                allocInfo.level(VK_COMMAND_BUFFER_LEVEL_PRIMARY);
+                allocInfo.commandPool(commandPool);
+                allocInfo.commandBufferCount(1);
+
+                PointerBuffer pCommandBuffer = stack.mallocPointer(1);
+                vkAllocateCommandBuffers(device, allocInfo, pCommandBuffer);
+                VkCommandBuffer commandBuffer = new VkCommandBuffer(pCommandBuffer.get(0), device);
 
-                vkMapMemory(device, vertexBufferMemory, 0, bufferInfo.size(), 0, data);
+                VkCommandBufferBeginInfo beginInfo = VkCommandBufferBeginInfo.calloc(stack);
+                beginInfo.sType(VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
+                beginInfo.flags(VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT);
+
+                vkBeginCommandBuffer(commandBuffer, beginInfo);
                 {
-                    memcpy(data.getByteBuffer(0, (int) bufferInfo.size()), VERTICES);
+                    VkBufferCopy.Buffer copyRegion = VkBufferCopy.calloc(1, stack);
+                    copyRegion.size(size);
+                    vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, copyRegion);
+                }
+                vkEndCommandBuffer(commandBuffer);
+
+                VkSubmitInfo submitInfo = VkSubmitInfo.calloc(stack);
+                submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
+                submitInfo.pCommandBuffers(pCommandBuffer);
+
+                if(vkQueueSubmit(graphicsQueue, submitInfo, VK_NULL_HANDLE) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to submit copy command buffer");
                 }
-                vkUnmapMemory(device, vertexBufferMemory);
+
+                vkQueueWaitIdle(graphicsQueue);
+
+                vkFreeCommandBuffers(device, commandPool, pCommandBuffer);
             }
         }
 
